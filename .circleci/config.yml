
version: 2.1
jobs:
  build-mac:
    macos:
      xcode: 12.5.1
    steps:
      - checkout
      - run:
          name: install elixir
          command: brew install elixir libpq libpqxx
      - run:
          name: Make build
          command:  |
            mix local.hex --force
            mix deps.get
            mix compile
            mix test

  build-mac-arm:
    machine: true
    resource_class: polarityio-corp/m1-mini      
    steps:
      - checkout
      - run:
          name: Make build
          command:  |
            export PATH=${PATH}:${HOME}/.asdf/shims
            asdf install
            mix local.hex --force
            mix deps.get
            mix compile
            mix test


  build-linux:
    docker:
      - image: cimg/elixir:1.12.3
      - image: 577326318091.dkr.ecr.us-east-1.amazonaws.com/polarity-aws-prod/centos7:circleci
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Make build
          command:  |
            mix local.hex --force
            mix deps.get
            mix compile
            mix test

  build-linux-arm:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    steps:
      - add_ssh_keys:
          fingerprints:
            - "fd:ee:41:72:fa:0a:25:e9:e2:db:8d:2a:60:5f:a8:d2"        
      - run: sudo pip3 install awscli 
      - run: 
          command: | 
             aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} 
             aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}  
             aws configure set region us-east-1   
      - checkout
      - attach_workspace:
          at: /tmp/workspace

      - run: |
          aws s3 cp s3://polarityio-prod-builds/utils/cmake/cmake-3.22.5-linux-arm64.tgz cmake-3.22.5-linux-arm64.tgz
          tar zxvf cmake-3.22.5-linux-arm64.tgz
          curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update && sudo apt-get install -y postgresql-server-dev-13 libpq-dev
          wget https://github.com/jtv/libpqxx/archive/refs/tags/7.7.3.tar.gz
          tar zxvf 7.7.3.tar.gz
          cd libpqxx-7.7.3
          mkdir build
          cd build
          ../../cmake-3.22.5/bin/cmake -DBUILD_SHARED_LIBS=off ..          
          make -j2
          mkdir dist
          make DESTDIR=$PWD/dist install
          cd ..
          tar zcvf libpqxx-7.7.3-linux-arm64.tgz -C build/dist .
          aws s3 cp ./libpqxx-7.7.3-linux-arm64.tgz s3://polarityio-prod-builds/libpqxx/7.7.3/libpqxx-7.7.3-linux-arm64.tgz
      - run:
          name: Make build
          command:  |
            git clone https://github.com/asdf-vm/asdf.git .asdf --branch v0.10.0
            . .asdf/asdf.sh
            asdf plugin add elixir https://github.com/asdf-vm/asdf-elixir.git
            asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
            asdf install
            mix local.hex --force
            mix deps.get
            mix compile
            mix test
          

  tag-it:
    parameters:
      build-mode:
        type: enum
        default: "auto"
        enum: [ "nightly", "auto", "alpha", "beta", "candidate", "release"]
      version-scope:
        type: enum
        default: "auto"
        enum: [ "major", "minor", "patch", "auto"]
      tag-commit:
        type: boolean
        default: true
    docker:
      - image: 577326318091.dkr.ecr.us-east-1.amazonaws.com/polarity-aws-prod/centos7:circleci
    working_directory: ~/project
    steps:
      - add_ssh_keys:
          fingerprints:
            - "fd:ee:41:72:fa:0a:25:e9:e2:db:8d:2a:60:5f:a8:d2"
      - run: sudo yum -y install python-pip curl wget            
      - run: sudo pip install awscli 
      - run: 
          command: | 
             aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} 
             aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}  
             aws configure set region us-east-1   
      - checkout
      - run:
          name: download semtag
          command: aws s3 cp s3://polarityio-px-build/3.3.0/semtag bin/semtag      
      - run:
          name: evaluate branch name into buildmode variable
          command: |
            export buildmode="<< parameters.build-mode >>"
            if [ "$buildmode" == "auto" ] ; then                                                           \
              [[ "$CIRCLE_BRANCH" =~ ^.*-alpha$ ]] && echo "export buildmode=alpha"  >> $BASH_ENV;  \
              [[ "$CIRCLE_BRANCH" =~ ^.*-beta$ ]] && echo "export buildmode=beta"    >> $BASH_ENV;  \
              [[ "$CIRCLE_BRANCH" =~ ^.*-rc$ ]] && echo "export buildmode=candidate" >> $BASH_ENV;  \
              [[ "$CIRCLE_BRANCH" == "main" ]] && echo "export buildmode=release"         >> $BASH_ENV;  \
            else                                                                                           \
              echo "export buildmode=\"$buildmode\"" >> $BASH_ENV;                                         \
            fi
            echo "branch: $CIRCLE_BRANCH"
            echo "buildmode: $buildmode"
      - run:
          name: decide scope of version bump
          command: |
            export versionscope="<< parameters.version-scope >>"
            echo "versionscope: $versionscope"
            if [ "$versionscope" == "auto" ] ; then                    \
              echo "export versionscope=\"-s patch\""  >> $BASH_ENV;  
            else
              echo "export versionscope=\"-s $versionscope\"" >> $BASH_ENV;
            fi
      - run:
          name: set version number
          command: |
            chmod +x bin/semtag   
            if [ "$buildmode" == "nightly" ]; then                                \
              bin/semtag build -pob "nightly.:d"      > tmp_version;   \
            elif [ "$buildmode" == "alpha" ]; then                                \
              bin/semtag alpha -apo $versionscope     > tmp_version;   \
            elif [ "$buildmode" == "beta" ]; then                                 \
              bin/semtag beta -apo $versionscope      > tmp_version;   \
            elif [ "$buildmode" == "candidate" ]; then                            \
              bin/semtag candidate -apo $versionscope > tmp_version;   \
            elif [ "$buildmode" == "release" ]; then                              \
              bin/semtag final -apo $versionscope     > tmp_version;   \
            else                                                                  \
              bin/semtag build -apo $versionscope     > tmp_version;   \
            fi
            echo "branch: $CIRCLE_BRANCH"
            echo "buildmode: $buildmode"       
            echo "versionscope: $versionscope"
            cat tmp_version
            echo "export PX_VERSION=\"$(cat tmp_version)\"" >> $BASH_ENV 
      - when:
          condition: << parameters.tag-commit >>
          steps:
            - run:
                name: tag version number
                command: |  
                  git tag "$PX_VERSION" || echo "Could not tag commit"
                  git push origin "$PX_VERSION" || echo "Did not push tag"
      


workflows:
  build-release:
    jobs:  
      # - build-linux
      - build-linux-arm
      # - build-mac
      # - build-mac-arm
      # - tag-it:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #     requires:
      #       - build-linux
      #       - build-linux-arm
      #       - build-mac
      #       - build-mac-arm

orbs:
  aws-s3: circleci/aws-s3@1.0.15
  win: circleci/windows@2.2.0
